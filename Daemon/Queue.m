//
//  Queue.m
//  RansomWhere
//
//  Created by Patrick Wardle on 9/26/14.
//  Copyright Â© 2016 Objective-See. All rights reserved.
//

//TODO: https://developer.apple.com/library/mac/qa/qa1419/_index.html to increase stack size if too many threads? 

#import "main.h"
#import "Event.h"
#import "Queue.h"
#import "Consts.h"
#import "Process.h"
#import "Logging.h"
#import "Utilities.h"


@implementation Queue

@synthesize icon;
@synthesize eventQueue;
@synthesize queueCondition;
@synthesize disallowedProcs;
@synthesize approvedBinsFile;

//init
// ->alloc & queue thead
-(id)init
{
    //init super
    self = [super init];
    if(nil != self)
    {
        //init queue
        eventQueue = [NSMutableArray array];
 
        //init empty condition
        queueCondition = [[NSCondition alloc] init];
 
        //alloc for 'user-disallowed' processes
        disallowedProcs = [NSMutableDictionary dictionary];
        
        //init path to icon
        icon = [NSURL URLWithString:[[NSProcessInfo.processInfo.arguments[0] stringByDeletingLastPathComponent] stringByAppendingPathComponent:ALERT_ICON]];
        
        //init path to user-approved binaries
        approvedBinsFile = [[NSProcessInfo.processInfo.arguments[0] stringByDeletingLastPathComponent] stringByAppendingPathComponent:USER_APPROVED_BINARIES];
        
        //kick off thread to watch/process items placed in queue
        [NSThread detachNewThreadSelector:@selector(dequeue:) toTarget:self withObject:nil];
    }
    
    return self;
}

//add an object to the queue
-(void)enqueue:(id)anObject
{
    //lock
    [self.queueCondition lock];
    
    //add to queue
    [self.eventQueue enqueue:anObject];
    
    //signal
    [self.queueCondition signal];
    
    //unlock
    [self.queueCondition unlock];
    
    return;
}

//dequeue
// ->forever, process events from queue
-(void)dequeue:(id)threadParam
{
    //watch event
    Event* event = nil;

    //for ever
    while(YES)
    {
        //pool
        @autoreleasepool {
            
        //lock queue
        [self.queueCondition lock];
        
        //wait while queue is empty
        while(YES == [self.eventQueue empty])
        {
            //wait
            [self.queueCondition wait];
        }
        
        //item is in queue!
        // ->grab it, then process
        event = [eventQueue dequeue];
            
        //unlock
        [self.queueCondition unlock];
            
        //create thread to process event
        [NSThread detachNewThreadSelector:@selector(processEvent:) toTarget:self withObject:event];
        
        }//pool
        
    }//loop: foreverz process queue
        
    return;
}

//thread method
// ->process event off queue
-(void)processEvent:(Event*)event
{
    //process obj for event
    Process* process = nil;
    
    //response
    CFOptionFlags response = 0;
    
    //dbg msg
    logMsg(LOG_DEBUG, [NSString stringWithFormat:@"processing queued event: %@", event]);
    
    //try find process object
    // ->ignore any events who's procs aren't found
    @synchronized(processList)
    {
        //lookup
        process = processList[event.processPath];
        if(nil == process)
        {
            //bail
            goto bail;
        }
    }

    //skip events generated by OS X apps (signed by Apple proper)
    if(YES == process.isApple)
    {
        //dbg msg
        logMsg(LOG_DEBUG, @"ignoring: is Apple binary");
        
        //bail
        goto bail;
    }
    
    //dbg msg
    logMsg(LOG_DEBUG, @"0) is not Apple binary");

    //skip events generated by apps baselined/prev. installed apps
    if(YES == [installedApps containsObject:process.path])
    {
        //dbg msg
        logMsg(LOG_DEBUG, @"ignoring: is installed/baselined app");
        
        //bail
        goto bail;
    }
    
    //dbg msg
    logMsg(LOG_DEBUG, @"1) is not installed/baselined app");
    
    //sync
    @synchronized(userApprovedBins)
    {

    //skip events generated by 'user-allowed' binaries
    if(YES == [userApprovedBins containsObject:process.path])
    {
        //dbg msg
        logMsg(LOG_DEBUG, @"ignoring: is allowed binary");
        
        //bail
        goto bail;
    }
        
    }//sync
    
    //dbg msg
    logMsg(LOG_DEBUG, @"2) is from non-allowed binary");
    
    //sync
    @synchronized(self.disallowedProcs)
    {
    
    //skip events generated by disallowed processes
    // ->since a disallowed process is only set once user has killed (meaning such events are 'stale' and the proc is dead)
    if(YES == [self.disallowedProcs[event.processID] isEqualToString:process.path])
    {
        //dbg msg
        logMsg(LOG_DEBUG, @"ignoring: is disallowed process");
        
        //bail
        goto bail;
    }
    
    }//sync
        
    //dbg msg
    logMsg(LOG_DEBUG, @"3) is from non-disallowed process");
    
    //ignore files under 1014
    // ->entropy calculations don't do well on smaller files
    if([[[NSFileManager defaultManager] attributesOfItemAtPath:event.filePath error:nil] fileSize] < 1024)
    {
        //dbg msg
        logMsg(LOG_DEBUG, [NSString stringWithFormat:@"ignoring: small file (%llu bytes)", [[[NSFileManager defaultManager] attributesOfItemAtPath:event.filePath error:nil] fileSize]]);
        
        //bail
        goto bail;
    }
    
    //dbg msg
    logMsg(LOG_DEBUG, @"4) is large enough");
    
    //skip any non-encrypted files
    // ->note: also ignores image files
    if(YES != isEncrypted(event.filePath))
    {
        //dbg msg
        logMsg(LOG_DEBUG, @"ignoring: is not encrypted");
        
        //bail
        goto bail;
    }
    
    //dbg msg
    logMsg(LOG_DEBUG, @"5) is encrypted");
    
    //sync to alert user
    @synchronized(self)
    {
        //check again to ignore events that were prev alerted & disallowed by user!
        if(YES == [self.disallowedProcs[event.processID] isEqualToString:process.path])
        {
            //dbg msg
            logMsg(LOG_DEBUG, @"ignoring: is disallowed (now) process");
            
            //bail
            goto bail;
        }
        
        //check again to ignore events that were prev alerted & allowed by user
        if(YES == [userApprovedBins containsObject:process.path])
        {
            //dbg msg
            logMsg(LOG_DEBUG, @"ignoring: is allowed (now) process");
            
            //bail
            goto bail;
        }
        
        //dbg msg
        logMsg(LOG_DEBUG, @"suspending process and alerting user!");
        
        //suspend process
        if(-1 == kill(event.processID.intValue, SIGSTOP))
        {
            //failed to suspend process
            logMsg(LOG_ERR, [NSString stringWithFormat:@"failed to suspend %@ (%@), with %d", event.processID, event.processPath, errno]);
            
            //bail
            goto bail;
        }
        
        //alert user
        // ->note: will block until user responsed
        response = [self alertUser:event];
        
        //handle response
        // ->either resume or terminate process
        [self processResponse:event response:response];
    }
    
//bail
bail:
    
    return;
}


//show alert to the user
// ->block until response, which is returned from this method
-(CFOptionFlags)alertUser:(Event*)event
{
    //user's response
    CFOptionFlags response = 0;
    
    //header
    CFStringRef title = NULL;
    
    //body
    CFStringRef body = NULL;
    
    //init title
    title = (__bridge CFStringRef)([NSString stringWithFormat:@"RansomWhere: %@ ðŸ”’'d a file", [event.processPath lastPathComponent]]);
   
    //init body
    body = (__bridge CFStringRef)([NSString stringWithFormat:@"%@\r\n\r\nðŸ”’'d file: %@", event.processPath, event.filePath]);
    
    //show alert
    // ->will block until user iteraction, then response saved in 'response' variable
    CFUserNotificationDisplayAlert(0.0f, kCFUserNotificationStopAlertLevel, (CFURLRef)self.icon, NULL, NULL, title, body, (__bridge CFStringRef)@"Terminate", (__bridge CFStringRef)@"Allow", NULL, &response);
    
//bail
bail:
    
    return response;
}

//handle response
// ->either resume or terminate process
-(void)processResponse:(Event*)event response:(CFOptionFlags)response
{
    //terminate process
    if(PROCESS_TERMINATE == response)
    {
        //dbg msg
        logMsg(LOG_DEBUG, @"user responded with: terminated");
        
        //terminate
        if(-1 == kill(event.processID.intValue, SIGKILL))
        {
            //err msg
            logMsg(LOG_ERR, [NSString stringWithFormat:@"failed to kill %@ (%@), with %d", event.processID, event.processPath, errno]);
            
            //bail
            goto bail;
        }
        
        //sync to add
        @synchronized(self.disallowedProcs)
        {
            //add to 'disallowed' procs set
            self.disallowedProcs[event.processID] = event.processPath;
        }
        
        //dbg msg
        logMsg(LOG_DEBUG, @"terminated process");
    }
    
    //resume process
    else
    {
        //dbg msg
        logMsg(LOG_DEBUG, @"user responded with: resume (allow)");
        
        //resume
        if(-1 == kill(event.processID.intValue, SIGCONT))
        {
            //err msg
            logMsg(LOG_ERR, [NSString stringWithFormat:@"failed to resume %@ (%@), with %d", event.processID, event.processPath, errno]);
            
            //bail
            goto bail;
        }
        
        //sync
        // ->add to list and write out to disk
        @synchronized(userApprovedBins)
        {
            //add to user-allowed binaries
            //self.allowedProcs[event.processID] = event.processPath;
            [userApprovedBins addObject:event.processPath];
            
            //save to disk
            if(YES != writeSetToFile(userApprovedBins, self.approvedBinsFile))
            {
                //err msg
                logMsg(LOG_ERR, [NSString stringWithFormat:@"failed to updated persistent list of user approved apps (%@)", self.approvedBinsFile]);
            }
            
            //dbg msg
            logMsg(LOG_DEBUG, [NSString stringWithFormat:@"updated persistent list of user approved apps (%@)", self.approvedBinsFile]);
        }
        
        //dbg msg
        logMsg(LOG_DEBUG, @"resumed process");
    }
    
//bail
bail:
 
    return;
}


@end
